# Deploys PCP to Packagecloud
name: Release
on:
  push:
    tags:
      - '*.*.*'
      - '!*alpha'
      - '!*beta'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  qa:
    name: ${{ matrix.platform }}
    if: github.repository == 'performancecopilot/pcp' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # run all PCP builds in containers, because the GitHub Actions images contain
          # different packages than the stock Ubuntu releases
          - {platform: debian10-container,        os: ubuntu-20.04}
          - {platform: debian11-container,        os: ubuntu-20.04}
          - {platform: debian12-container,        os: ubuntu-22.04}
          - {platform: ubuntu1804-container,      os: ubuntu-22.04}
          - {platform: ubuntu2004-container,      os: ubuntu-22.04}
          - {platform: ubuntu2204-container,      os: ubuntu-22.04}
          - {platform: ubuntu2404-container,      os: ubuntu-22.04}
          - {platform: fedora38-container,        os: ubuntu-20.04}
          - {platform: fedora39-container,        os: ubuntu-20.04}
          - {platform: fedora40-container,        os: ubuntu-20.04}
          - {platform: centos6-container,         os: ubuntu-20.04}
          - {platform: centos7-container,         os: ubuntu-20.04}
          - {platform: centos-stream8-container,  os: ubuntu-20.04}
          - {platform: centos-stream9-container,  os: ubuntu-20.04}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Fix local hostname DNS lookup
        run: echo 127.0.1.1 $(hostname --fqdn) $(hostname) | sudo tee -a /etc/hosts

      - name: Setup
        run: |
          python3 -c 'import yaml' || pip3 install pyyaml
          mkdir -p artifacts/build artifacts/test
          touch artifacts/build/.keep
          # crun >= 1.9.1 is required on Ubuntu 20.04.6
          # this workaround came from ...
          # https://github.com/kubernetes-sigs/kind/pull/3527
          curl -sLo /tmp/crun https://github.com/containers/crun/releases/download/1.14.3/crun-1.14.3-linux-amd64
          chmod +x /tmp/crun
          sudo cp /tmp/crun /usr/bin/crun

          build/ci/ci-run.py ${{ matrix.platform }} setup

      - name: Build
        run: build/ci/ci-run.py ${{ matrix.platform }} task build

      - name: Copy build artifacts
        run: build/ci/ci-run.py ${{ matrix.platform }} artifacts build --path artifacts/build

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: artifacts/build

      - name: Install
        run: build/ci/ci-run.py ${{ matrix.platform }} task install

      - name: Initialize QA
        id: init_qa
        run: build/ci/ci-run.py ${{ matrix.platform }} task init_qa

      - name: QA (sanity group)
        run: build/ci/ci-run.py ${{ matrix.platform }} task qa_sanity

      - name: Copy test results
        # always() is required here to run this step even if the QA step fails
        if: always() && steps.init_qa.outcome == 'success'
        run: build/ci/ci-run.py ${{ matrix.platform }} artifacts test --path artifacts/test

      - name: Publish test results
        if: always() && steps.init_qa.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: test-${{ matrix.platform }}
          path: artifacts/test

  release:
    name: Release packages
    if: github.repository == 'performancecopilot/pcp' || github.event_name == 'workflow_dispatch'
    needs: qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Discover artifacts
        run: find artifacts | xargs ls -l

      - name: Create source tarball
        run: ./Makepkgs --source --no
        nrpm

      - name: Release on Packagecloud            - 名稱：設定 Node.js 環境
  用途：actions/setup-node@v4.2.0
  和：
    # 在 npmrc 中設定 always-auth。
    always-auth: # 可選，預設為 false
    # 要使用的版本的版本規格。範例：12.x、10.15.1、>=10.15.0。
    節點版本：#可選
    # 包含要使用的版本的版本規範的檔案。範例：package.json、.nvmrc、.node-version、.tool-versions。
    node-version-file: # 可選
    # Node 使用的目標架構。範例：x86、x64。將預設使用系統架構。
    架構：#可選
    # 如果您希望操作檢查符合版本規範的最新可用版本，請設定此選項。
    檢查最新：#可選
    # 為身份驗證設定的可選註冊表。將在專案級 .npmrc 和 .yarnrc 檔案中設定登錄，並設定 auth 從 env.NODE_AUTH_TOKEN 讀取。
    registry-url: # 可選
    # 針對範圍註冊表進行身份驗證的可選範圍。使用 GitHub Packages 註冊表（https://npm.pkg.github.com/）時將回退至儲存庫擁有者。
    範圍：#可選
    # 用於從節點版本中提取節點分佈。由於存在預設值，因此使用者通常不提供該預設值。在 github.com 上執行此操作時，預設值就足夠了。在 GHES 上運行時，如果您遇到速率限制，您可以傳遞 github.com 的個人存取權杖。
    token: # 可選，預設為 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 用於指定在預設目錄中進行快取的套件管理器。支援的值：npm、yarn、pnpm。
    快取：#可選
    # 用於指定依賴檔案的路徑：package-lock.json、yarn.lock 等。
    快取依賴路徑：#可選
          
        run: build/ci/packagecloud.sh
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
